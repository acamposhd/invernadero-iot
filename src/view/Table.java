/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Data;
import model.Queries;

/**
 *
 * @author fields
 */
public class Table extends javax.swing.JFrame {

    /**
     * Creates new form Table
     */
    DefaultTableModel model;

    public Table() {
        initComponents();

        model = new DefaultTableModel();
        ResultTable.setModel(model);
        model.addColumn("Lectura");
        model.addColumn("Fecha");
        model.addColumn("Hora");
        Queries q = new Queries();
        Data d = new Data();

        switch (MainScreen.auxTable) {
            case "temp":
                q.selectTemp();
                if (q.tempSensor.size() < 1) {
                    sensorNameJlbl.setText("NO DATA");
                    model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});
                } else {
                    for (int i = 0; i < q.tempSensor.size(); i++) {
                        d = (Data) q.tempSensor.get(i);
                        model.addRow(new Object[]{d.getRead(), d.getDate(), d.getHour()});
                    }
                    sensorNameJlbl.setText(d.getName());
                }
                break;
            case "humi":
                q.selectHumi();
                if (q.humiSensor.size() < 1) {
                    sensorNameJlbl.setText("NO DATA");
                    model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});
                } else {
                    for (int i = 0; i < q.humiSensor.size(); i++) {
                        d = (Data) q.humiSensor.get(i);
                        model.addRow(new Object[]{d.getRead(), d.getDate(), d.getHour()});
                    }
                    sensorNameJlbl.setText(d.getName());
                }
                break;
            case "soil":
                q.selectSoil();
                if (q.soilSensor.size() < 1) {
                    sensorNameJlbl.setText("NO DATA");
                    model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});
                } else {
                    for (int i = 0; i < q.soilSensor.size(); i++) {
                        d = (Data) q.soilSensor.get(i);
                        model.addRow(new Object[]{d.getRead(), d.getDate(), d.getHour()});
                    }
                    sensorNameJlbl.setText(d.getName());
                }
                break;
            case "touch":
                q.selectTouch();
                if (q.touchSensor.size() < 1) {
                    sensorNameJlbl.setText("NO DATA");
                    model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});
                } else {
                    for (int i = 0; i < q.touchSensor.size(); i++) {
                        d = (Data) q.touchSensor.get(i);
                        model.addRow(new Object[]{d.getRead(), d.getDate(), d.getHour()});
                    }
                    sensorNameJlbl.setText(d.getName());
                }
                break;
            case "foto":
                q.selectLight();
                if (q.lightSensor.size() < 1) {
                    sensorNameJlbl.setText("NO DATA");
                    model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});
                }else{
                for (int i = 0; i < q.lightSensor.size(); i++) {
                    d = (Data) q.lightSensor.get(i);
                    model.addRow(new Object[]{d.getRead(), d.getDate(), d.getHour()});
                }
                sensorNameJlbl.setText(d.getName());
                }
                break;
            case "NO":
                sensorNameJlbl.setText("NO DATA");
                model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});
                break;
            default:
                sensorNameJlbl.setText("NO DATA");
                model.addRow(new Object[]{"NO", "DATA", "AVAILABLE"});

        }
        /*model = new DefaultTableModel();
         ResultTable.setModel(model);
         model.addColumn("Lectura");
         model.addColumn("Fecha");
         model.addColumn("Hora");
         Queries q = new Queries();*/
        //q.selectTemp();
        //Data d =  new Data();
        /*q.selectTemp();
         for(int i = 0; i<q.tempSensor.size();i++){     
            d = (Data) q.tempSensor.get(i);
            model.addRow(new Object[]{d.getRead(), d.getDate(), d.getHour()});
         }*/
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        ResultTable = new javax.swing.JTable();
        sensorNameJlbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("REPORTE ");
        setMinimumSize(new java.awt.Dimension(810, 500));
        setPreferredSize(new java.awt.Dimension(810, 500));
        setResizable(false);
        getContentPane().setLayout(null);

        ResultTable.setFont(new java.awt.Font("MS Reference Sans Serif", 0, 14)); // NOI18N
        ResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Lectura", "Fecha", "Hora"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        ResultTable.setEnabled(false);
        jScrollPane1.setViewportView(ResultTable);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(70, 100, 690, 270);

        sensorNameJlbl.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        sensorNameJlbl.setForeground(new java.awt.Color(255, 255, 255));
        sensorNameJlbl.setText("sensor");
        getContentPane().add(sensorNameJlbl);
        sensorNameJlbl.setBounds(360, 60, 230, 30);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Reporte de sensor");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(310, 20, 230, 32);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sources/logo_uta_mini.png"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(580, 400, 220, 80);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sources/reporteWall.jpg"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(0, 0, 800, 480);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Table.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Table().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable ResultTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel sensorNameJlbl;
    // End of variables declaration//GEN-END:variables
}
